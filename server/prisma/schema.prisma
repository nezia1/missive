// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String         @id @default(uuid()) @db.Uuid
  name      String         @unique
  password  String
  totp_url  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  tokens    RefreshToken[]
  pendingMessages PendingMessage[] @relation("ReceivedMessages")
  // this is a virtual relation to comply with Prisma's limitation of not being able to have a relation with the same model twice if one of them is unidirectional
  sentMessages    PendingMessage[]  @relation("SentMessages", references: [], fields: [])
  oneTimePreKeys  OneTimePreKey[]
  signedPreKey SignedPreKey?
}

// RefreshToken model
model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  value     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

model PendingMessage {
  id          String   @id @default(uuid()) @db.Uuid
  content     String  
  receiverId  String   @db.Uuid
  receiver    User     @relation(name: "ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId    String   @db.Uuid
  sender      User     @relation(name: "SentMessages", fields: [senderId], references: [id])
  sentAt      DateTime @default(now())
}

model OneTimePreKey {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  key       String
}

model SignedPreKey {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId    String   @db.Uuid @unique
  key       String
  signature String
}
